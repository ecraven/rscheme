{RefEntry}
{RefNameDiv}
  {RefName}list?{/RefName}
  {RefPurpose}Test if an object is a proper list.{/RefPurpose}
  {RefClass role="Type"}function{/RefClass}
{/RefNameDiv}
{RefSynopsisDiv}
{FuncSynopsis Role="Scheme"}
{FuncPrototype}
{FuncDef}{Function/list?/{/FuncDef}
{ParamDef role="arguments"}<!-- spaces are significant -->
 {Parameter/x/{/ParamDef}{ParamDef role="returns"}
{Parameter}q{/Parameter}{/ParamDef}{/FuncPrototype}
{/FuncSynopsis}
{RefSect2}
  {Title}Arguments{/Title}
  {VariableList}
   {VarListEntry}
    {Term}x{/Term}
    {ListItem}{para}
An instance of {ClassName/<object>/{/para}
    {/ListItem}
   {/VarListEntry}
  {/VariableList}
{/RefSect2}
{RefSect2}
  {Title}Return Values{/Title}
  {VariableList}
   {VarListEntry}
    {Term}q{/Term}
    {ListItem}{para}
An instance of {ClassName/<boolean>/{/para}
    {/ListItem}
   {/VarListEntry}
  {/VariableList}
{/RefSect2}
{/RefSynopsisDiv}
{RefSect1}
  {Title}Description{/Title}
{para}
Returns true if and only if {Parameter}x{/Parameter} is a proper list --
a sequence of zero or more cdr-linked pairs terminated
with the empty list.{/para}
{para}
In particular, {Phrase Role="var"}list?{/Phrase} does finish and returns {UserInput}#f{/UserInput} on cyclic lists.
As a result, this function is fairly expensive (quadratic on
long lists, although optimized for short ones).{/para}
{/RefSect1}
{/RefEntry}
