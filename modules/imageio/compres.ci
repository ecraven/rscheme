/*-----------------------------------------------------------------*-C-*---
 * File:    modules/imageio/compres.ci
 *
 *          Copyright (C)1997 Donovan Kolbly <d.kolbly@rscheme.org>
 *          as part of the RScheme project, licensed for free use.
 *          See <http://www.rscheme.org/> for the latest information.
 *
 * File version:     1.3
 * File mod date:    1997-11-29 23:10:53
 * System build:     v0.7.3.4-b7u, 2007-05-30
 *
 *------------------------------------------------------------------------*/

/*
 *    HIT encoding:    +-------+-------+
 *                     | index | diffs |
 *                     +-------+-------+
 *            where:
 *                         +--------------------+-------+-----+
 *           lru[index] := | ... data bits ...  | diffs | D D |
 *                         +--------------------+-------+-----+
 *
 *    MISS encoding:
 *                     +------+----+----+
 *                     | 1111 |size|type|
 *                     +------+----+----+
 *          size: 00 => 1 bytes
 *                01 => 2 bytes
 *                10 => 3 bytes
 *                11 => reinterpret type:
 *                      00 => 4 byte miss
 *                      01, 10, 11 => RESERVED/UNDEF
 */
#define ENCODE_HIT(index,diff) (((index)<<4) + (diff))
#define ENCODE_MISS(type,size) (0xF0 + ((type)) + ((size)<<2))
#define lruLength (15)
#define ignoreBits (4)
#define matchMask (0xFFFFFFFF & ~(((1<<ignoreBits)-1) << 2))

struct compress_context {
    UINT_8	*buf_ptr;
    UINT_32	left_in_buffer;
    UINT_32	hist[lruLength];
    struct buffer_chain buf;
};

static void write_byte( struct compress_context *ctx, UINT_8 byte )
{
    if (ctx->left_in_buffer == 0)
    {
	ctx->left_in_buffer = 60;
	ctx->buf_ptr = (UINT_8 *)reserve( &ctx->buf, ctx->left_in_buffer );
    }
    *(ctx->buf_ptr)++ = byte;
    (ctx->left_in_buffer)--;
}

static void write_word( struct compress_context *ctx, UINT_32 word )
{
UINT_8 coding;
UINT_32 mask, match, i;

    mask = matchMask;
    match = word & mask;
#ifdef DEBUG_COMPRESSION
    printf( "mask = %08x  match = %08x: ", mask, match );
#endif /* DEBUG_COMPRESSION */
    
    for (i=0; i<lruLength; i++)
	if ((ctx->hist[i] & mask) == match)
	{
	    /* a hit -- emit the short form */
	    
#ifdef DEBUG_COMPRESSION
	    printf( " hit at [%u]\n", i );
#endif /* DEBUG_COMPRESSION */
	    
	    coding = ENCODE_HIT(i,(word >> 2) & ((1<<ignoreBits)-1));
	    write_byte( ctx, coding );
	    
	    /* shift the queue */
	    while (i > 0)
	    {
		ctx->hist[i] = ctx->hist[i-1];
		i--;
	    }
	    ctx->hist[0] = word;
	    
	    return;
	}
    /* a miss */
    
    for (i=lruLength-1; i>0; i--)
	ctx->hist[i] = ctx->hist[i-1];
    ctx->hist[0] = word;
    
#ifdef DEBUG_COMPRESSION
    printf( " miss:" );
#endif /* DEBUG_COMPRESSION */
    
    if ((word & 3) == 0)
    { 
    INT_32 v = word;
    
	if (v < 512 && v >= -512)
	{
#ifdef DEBUG_COMPRESSION
	    printf( "i0\n" );
#endif /* DEBUG_COMPRESSION */
	    write_byte( ctx, ENCODE_MISS(0,0) );
	    write_byte( ctx, v >> 2 );
	}
	else if (v < 0x20000 && v >= -0x20000)
	{
#ifdef DEBUG_COMPRESSION
	    printf( "i1\n" );
#endif /* DEBUG_COMPRESSION */
	    write_byte( ctx, ENCODE_MISS(0,1) );
	    write_byte( ctx, v >> 10 );
	    write_byte( ctx, v >> 2 );
	}
	else if (v < 0x2000000 && v >= -0x2000000)
	{
#ifdef DEBUG_COMPRESSION
	    printf( "i2\n" );
#endif /* DEBUG_COMPRESSION */
	    write_byte( ctx, ENCODE_MISS(0,2) );
	    write_byte( ctx, v >> 18 );
	    write_byte( ctx, v >> 10 );
	    write_byte( ctx, v >> 2 );
	}
	else
	    goto full_word;
	return;
    }
    else
    {
	if (word < 256*4)
	{
#ifdef DEBUG_COMPRESSION
	    printf( "%c0\n", "*i?p"[word&3] );
#endif /* DEBUG_COMPRESSION */
	    write_byte( ctx, ENCODE_MISS((word & 3),0) );
	    write_byte( ctx, word >> 2 );
	}
	else if (word < 65536*4)
	{
#ifdef DEBUG_COMPRESSION
	    printf( "%c1\n", "*i?p"[word&3] );
#endif /* DEBUG_COMPRESSION */
	    write_byte( ctx, ENCODE_MISS((word & 3),1) );
	    write_byte( ctx, word >> 10 );
	    write_byte( ctx, word >> 2);
	}
	else if (word < 0x1000000*4)
	{
#ifdef DEBUG_COMPRESSION
	    printf( "%c2\n", "*i?p"[word&3] );
#endif /* DEBUG_COMPRESSION */
	    write_byte( ctx, ENCODE_MISS((word & 3),2) );
	    write_byte( ctx, word >> 18 );
	    write_byte( ctx, word >> 10 );
	    write_byte( ctx, word >> 2 );
	}
	else
	    goto full_word;
	return;
    }
full_word:
#ifdef DEBUG_COMPRESSION
    printf( ":3\n" );
#endif /* DEBUG_COMPRESSION */
    write_byte( ctx, ENCODE_MISS(0,3) );
    write_byte( ctx, word >> 24 );
    write_byte( ctx, word >> 16 );
    write_byte( ctx, word >> 8 );
    write_byte( ctx, word );
}

static void init_hist( UINT_32 *hist )
{
unsigned i;

    for (i=0; i<lruLength-4; i++)
	hist[i] = (i<<6)+3;
    hist[i++] = 0;
    hist[i++] = 1<<6;
    hist[i++] = 2<<6;
    hist[i++] = 3<<6;
}

obj rs_compress( obj buffer_list )
{
UINT_32 i, n, *src;
struct compress_context ctx;

    init_buf_chain( &ctx.buf );
    
    ctx.buf_ptr = NULL;
    ctx.left_in_buffer = 0;
    init_hist( ctx.hist );
    
    while (!EQ(buffer_list,NIL_OBJ))
    {
	src = (UINT_32 *)PTR_TO_DATAPTR(pair_car(buffer_list));
	n = *src++;
	for (i=0; i<n; i+=SLOT(1))
	{
	    write_word( &ctx, *src++ );
	}
	buffer_list = pair_cdr(buffer_list);
    }
    
    flush( &ctx.buf );
    if (ctx.left_in_buffer)
    {
    UINT_32 *p;
    
        p = (UINT_32 *)PTR_TO_DATAPTR(ctx.buf.cur_buffer);
	assert( p[0] >= ctx.left_in_buffer );
	p[0] -= ctx.left_in_buffer;
    }
    return make2( vector_class,
    		  int2fx(ctx.buf.total_len - ctx.left_in_buffer), 
		  ctx.buf.first_cell );
}

