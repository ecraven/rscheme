/*-----------------------------------------------------------------*-C-*---
 * File:    modules/imageio/uncompr.ci
 *
 *          Copyright (C)1997 Donovan Kolbly <d.kolbly@rscheme.org>
 *          as part of the RScheme project, licensed for free use.
 *          See <http://www.rscheme.org/> for the latest information.
 *
 * File version:     1.3
 * File mod date:    1997-11-29 23:10:53
 * System build:     v0.7.3.4-b7u, 2007-05-30
 *
 *------------------------------------------------------------------------*/

struct image_source {
    UINT_8 	*ptr;
    UINT_8 	*limit;
    UINT_32	hist[lruLength];
};

static UINT_8 get_byte( struct image_source *src )
{
UINT_8 ch;

    ch = *(src->ptr)++;
#ifdef DEBUG_COMPRESSION
    printf( " [%02x]", ch );
#endif /* DEBUG_COMPRESSION */
    return ch;
}

static void get_words( struct image_source *src, void *dest, UINT_32 bytes )
{
UINT_32 i, k, word, *d = (UINT_32 *)dest;
UINT_8 code, subcode, qposn;

    /* bytes must be even # words */
    
    for (k=0; k<bytes; k+=4)
    {
#ifdef DEBUG_COMPRESSION
	printf( "getting word[%u]: ", k/4 );
	fflush(stdout);
#endif /* DEBUG_COMPRESSION */

	code = get_byte(src);
	subcode = code & 0x0F;
	if (code >= 0xF0)
	{
	    /* it's a miss */
#ifdef DEBUG_COMPRESSION
	    printf( "miss (%u,%u)", subcode>>2, subcode&3 );
#endif /* DEBUG_COMPRESSION */
	    
	    word = 0;
	    switch (subcode & 0xC)
	    {
		case 0xC:
		    switch (subcode & 3)
		    {
			case 0:
#ifdef DEBUG_COMPRESSION
				    printf( " :3" );
#endif /* DEBUG_COMPRESSION */
				    /* plain 32 bits */
				    word = get_byte(src) << 24;
				    word |= get_byte(src) << 16;
				    word |= get_byte(src) << 8;
				    word |= get_byte(src);
				    goto done_w_miss;
			case 1:
			case 2:
			case 3:
				    /* undefined cases... */
				    word = 0;
				    printf( "ERROR: %02x\n", code );
				    goto done_w_miss;
		    }
		case 0x8:
#ifdef DEBUG_COMPRESSION
		    printf( " %c2", "ni?p"[(subcode>>2)&3] );
#endif /* DEBUG_COMPRESSION */
		    word |= get_byte(src) << 18;
		case 0x4:
#ifdef DEBUG_COMPRESSION
		    printf( " %c1", "ni?p"[(subcode>>2)&3] );
#endif /* DEBUG_COMPRESSION */
		    word |= get_byte(src) << 10;
		case 0x0:
#ifdef DEBUG_COMPRESSION
		    printf( " %c0", "ni?p"[(subcode>>2)&3] );
#endif /* DEBUG_COMPRESSION */
		    word |= get_byte(src) << 2;
	    }

	    if ((subcode & 3) == 0)
	    {
		/* it's a signed int...depending on the size,
		   check if we need to sign-extend */
		switch (subcode & 0xC)
		{
		    case 0xC: 	break;
		    case 0x8:	if (word & (0x800000 << 2))
				    word |= 0xFF000000 << 2;
				break;
		    case 0x4:	if (word & (0x8000 << 2))
				    word |= 0xFFFF0000 << 2;
				break;
		    case 0:	if (word & (0x80 << 2))
				    word |= 0xFFFFFF00 << 2;
				break;
		}
	    }
	    else
		word |= (subcode & 3);
	done_w_miss:
	    qposn = lruLength-1;
	}
	else
	{
	    /* it's a hit */
	    qposn = code >> ignoreBits;
#ifdef DEBUG_COMPRESSION
	    printf( "hit at [%u]", qposn );
#endif /* DEBUG_COMPRESSION */
	    word = src->hist[ qposn ] & matchMask;
	    word |= subcode << 2;
	}
	for (i=qposn; i>0; i--)
	    src->hist[i] = src->hist[i-1];
	src->hist[0] = *d++ = word;
#ifdef DEBUG_COMPRESSION
	printf( " = %08x\n", word );
#endif /* DEBUG_COMPRESSION */
    }
}

